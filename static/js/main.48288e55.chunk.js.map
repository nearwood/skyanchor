{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["headers","App","useState","latitude","setLatitude","longitude","setLongitude","forecast","setForecast","forecastURL","setForecastURL","useEffect","navigator","geolocation","getCurrentPosition","data","console","log","coords","error","warn","a","fetch","then","results","json","response","properties","fetchData","periods","className","role","aria-label","Array","isArray","map","period","key","name","alt","src","icon","detailedForecast","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.48288e55.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst headers = {\n  //Sigh... https://bugs.chromium.org/p/chromium/issues/detail?id=571722\n  \"User-Agent\": \"(https://github.com/nearwood/skyanchor, nearwood@gmail.com)\" //TODO: Consider externalizing this\n};\n\nexport default function App() {\n  const [zipcode, setZipcode] = useState(null); //TODO: Consider i8n implications.\n  const [latitude, setLatitude] = useState(null); //39.7456,-97.0892 \n  const [longitude, setLongitude] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [forecastURL, setForecastURL] = useState(null);\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      //TODO: Maybe a notification of some type.\n      console.warn(\"NO GEO\");\n    } else {\n      function success(data) {\n        console.log(data);\n        setLatitude(data.coords.latitude);\n        setLongitude(data.coords.longitude);\n      }\n\n      navigator.geolocation.getCurrentPosition(success, console.error);\n    }\n  }, []);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(`https://api.weather.gov/points/${latitude},${longitude}`, { headers }).then(results => results.json());\n      console.log(response);\n      setForecastURL(response?.properties?.forecast);\n    }\n\n    if (typeof latitude === 'number' && typeof longitude === 'number') {\n      fetchData();\n    }\n  }, [latitude, longitude]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(forecastURL, { headers }).then(results => results.json());\n      console.log(response);\n      setForecast(response?.properties?.periods);\n    }\n    if (forecastURL) {\n      fetchData();\n    }\n  }, [forecastURL]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <span role=\"img\" aria-label=\"skyanchor logo\" className=\"logo\">üå©Ô∏è</span>\n      </header>\n      <div>\n        {Array.isArray(forecast) && forecast.map(period => <div key={period.name}>\n          <img alt=\"weather icon\" src={period.icon}/><span>{period.name}</span><span>{period.detailedForecast}</span>\n        </div>)}\n      </div>\n    </div>\n  );\n}\n\n/*\nproperties:\n@id: \"https://api.weather.gov/points/39.7456,-97.0892\"\n@type: \"wx:Point\"\ncounty: \"https://api.weather.gov/zones/county/KSC201\"\ncwa: \"TOP\"\nfireWeatherZone: \"https://api.weather.gov/zones/fire/KSZ009\"\nforecast: \"https://api.weather.gov/gridpoints/TOP/31,80/forecast\"\nforecastGridData: \"https://api.weather.gov/gridpoints/TOP/31,80\"\nforecastHourly: \"https://api.weather.gov/gridpoints/TOP/31,80/forecast/hourly\"\nforecastOffice: \"https://api.weather.gov/offices/TOP\"\nforecastZone: \"https://api.weather.gov/zones/forecast/KSZ009\"\ngridId: \"TOP\"\ngridX: 31\ngridY: 80\nobservationStations: \"https://api.weather.gov/gridpoints/TOP/31,80/stations\"\nradarStation: \"KTWX\"\nrelativeLocation: {type: \"Feature\", geometry: {‚Ä¶}, properties: {‚Ä¶}}\ntimeZone: \"America/Chicago\"\n*/\n\n/*\nproperties:\nelevation: {value: 441.96, unitCode: \"unit:m\"}\nforecastGenerator: \"BaselineForecastGenerator\"\ngeneratedAt: \"2020-09-15T22:00:13+00:00\"\nperiods: Array(14)\n0: {number: 1, name: \"This Afternoon\", startTime: \"2020-09-15T17:00:00-05:00\", endTime: \"2020-09-15T18:00:00-05:00\", isDaytime: true, ‚Ä¶}\n1: {number: 2, name: \"Tonight\", startTime: \"2020-09-15T18:00:00-05:00\", endTime: \"2020-09-16T06:00:00-05:00\", isDaytime: false, ‚Ä¶}\n2: {number: 3, name: \"Wednesday\", startTime: \"2020-09-16T06:00:00-05:00\", endTime: \"2020-09-16T18:00:00-05:00\", isDaytime: true, ‚Ä¶}\n3: {number: 4, name: \"Wednesday Night\", startTime: \"2020-09-16T18:00:00-05:00\", endTime: \"2020-09-17T06:00:00-05:00\", isDaytime: false, ‚Ä¶}\n4: {number: 5, name: \"Thursday\", startTime: \"2020-09-17T06:00:00-05:00\", endTime: \"2020-09-17T18:00:00-05:00\", isDaytime: true, ‚Ä¶}\n5: {number: 6, name: \"Thursday Night\", startTime: \"2020-09-17T18:00:00-05:00\", endTime: \"2020-09-18T06:00:00-05:00\", isDaytime: false, ‚Ä¶}\n6: {number: 7, name: \"Friday\", startTime: \"2020-09-18T06:00:00-05:00\", endTime: \"2020-09-18T18:00:00-05:00\", isDaytime: true, ‚Ä¶}\n7: {number: 8, name: \"Friday Night\", startTime: \"2020-09-18T18:00:00-05:00\", endTime: \"2020-09-19T06:00:00-05:00\", isDaytime: false, ‚Ä¶}\n8: {number: 9, name: \"Saturday\", startTime: \"2020-09-19T06:00:00-05:00\", endTime: \"2020-09-19T18:00:00-05:00\", isDaytime: true, ‚Ä¶}\n9: {number: 10, name: \"Saturday Night\", startTime: \"2020-09-19T18:00:00-05:00\", endTime: \"2020-09-20T06:00:00-05:00\", isDaytime: false, ‚Ä¶}\n10: {number: 11, name: \"Sunday\", startTime: \"2020-09-20T06:00:00-05:00\", endTime: \"2020-09-20T18:00:00-05:00\", isDaytime: true, ‚Ä¶}\n11: {number: 12, name: \"Sunday Night\", startTime: \"2020-09-20T18:00:00-05:00\", endTime: \"2020-09-21T06:00:00-05:00\", isDaytime: false, ‚Ä¶}\n12: {number: 13, name: \"Monday\", startTime: \"2020-09-21T06:00:00-05:00\", endTime: \"2020-09-21T18:00:00-05:00\", isDaytime: true, ‚Ä¶}\n13: {number: 14, name: \"Monday Night\", startTime: \"2020-09-21T18:00:00-05:00\", endTime: \"2020-09-22T06:00:00-05:00\", isDaytime: false, ‚Ä¶}\nlength: 14\n__proto__: Array(0)\nunits: \"us\"\nupdateTime: \"2020-09-15T20:25:36+00:00\"\nupdated: \"2020-09-15T20:25:36+00:00\"\nvalidTimes: \"2020-09-15T14:00:00+00:00/P7DT11H\"\n*/\n\n/*\ndetailedForecast: \"Mostly clear, with a low around 59. South wind 5 to 10 mph.\"\nendTime: \"2020-09-16T06:00:00-05:00\"\nicon: \"https://api.weather.gov/icons/land/night/few?size=medium\"\nisDaytime: false\nname: \"Tonight\"\nnumber: 2\nshortForecast: \"Mostly Clear\"\nstartTime: \"2020-09-15T18:00:00-05:00\"\ntemperature: 59\ntemperatureTrend: null\ntemperatureUnit: \"F\"\nwindDirection: \"S\"\nwindSpeed: \"5 to 10 mph\"\n*/\n\n/*\nGeolocationPosition: {\n  coords: {\n    accuracy: 5\n    altitude: null\n    altitudeAccuracy: null\n    heading: null\n    latitude: 30.4042\n    longitude: -91.1431\n    speed: null\n  }\n  __proto__: GeolocationCoordinates\n  timestamp: 1600209266936\n}\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}