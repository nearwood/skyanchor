{"version":3,"sources":["HourlyReport.jsx","WeatherCard.jsx","Alerts.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","noWrap","whiteSpace","HourlyReport","props","data","classes","Table","className","table","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","hour","key","startTime","component","scope","dateString","Date","getHours","shortForecast","temperature","temperatureUnit","windSpeed","windDirection","avatar","width","spacing","height","WeatherCard","period","hourlyData","Card","CardActionArea","CardHeader","Avatar","src","icon","variant","title","name","subheader","utcString","dateObj","toLocaleDateString","convertDate","CardContent","Divider","Alerts","open","onClose","useTheme","fullScreen","useMediaQuery","breakpoints","down","alerts","Array","isArray","length","alert","id","areaDesc","category","severity","event","headline","effective","expires","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogActions","Button","autoFocus","onClick","color","appBar","display","flexGrow","menuButton","headers","ApiState","App","useState","geolocationState","setGeolocationState","locationState","setLocationState","forecastState","setForecastState","hourlyState","setHourlyState","alertsState","setAlertsState","latitude","setLatitude","longitude","setLongitude","cityState","setCityState","forecastURL","setForecastURL","forecast","setForecast","hourlyURL","setHourlyURL","hourlyForecast","setHourlyForecast","alertsURL","setAlertsURL","setAlerts","showAlerts","setShowAlerts","useEffect","navigator","geolocation","getCurrentPosition","coords","error","console","parseLocation","relativeLocation","properties","city","state","a","fetch","then","results","json","response","forecastHourly","latLonPoint","encodeURIComponent","fetchData","periods","getHourlySubset","start","end","endTime","filter","hourStart","hourEnd","features","alertCount","style","padding","AppBar","position","Toolbar","Typography","role","IconButton","edge","disabled","Badge","badgeContent","LinearProgress","value","increment","Math","round","reduce","total","loadingProgress","Grid","container","process","item","xs","md","lg","number","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9a996184.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  noWrap: {\n    whiteSpace: 'nowrap'\n  }\n}));\n\nconst getHour = (dateString) => new Date(dateString).getHours();\n\n\nexport default function HourlyReport(props) { //TODO prop-types\n  const { data } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n      <TableHead>\n        <TableRow>\n          <TableCell>Time</TableCell>\n          <TableCell align=\"right\"></TableCell>\n          <TableCell align=\"right\">Temperature</TableCell>\n          <TableCell align=\"right\">Wind</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {data.map((hour) => (\n          <TableRow key={hour.startTime}>\n            <TableCell component=\"th\" scope=\"row\">{getHour(hour.startTime)}:00</TableCell>\n            <TableCell align=\"right\">{hour.shortForecast}</TableCell>\n            <TableCell align=\"right\" className={classes.noWrap}>{hour.temperature} °{hour.temperatureUnit}</TableCell>\n            <TableCell align=\"right\" className={classes.noWrap}>{hour.windSpeed} {hour.windDirection}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Divider from '@material-ui/core/Divider';\nimport HourlyReport from './HourlyReport';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 512\n  },\n  avatar: {\n    width: theme.spacing(8),\n    height: theme.spacing(8),\n  }\n}));\n\nexport default function WeatherCard(props) { //TODO prop-types\n  const { period, hourlyData } = props;\n\n  const classes = useStyles();\n\n  const convertDate = (utcString) => {\n    const dateObj = new Date(utcString);\n    return dateObj?.toLocaleDateString();\n  };\n\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardHeader\n          avatar={<Avatar src={period.icon} variant=\"square\" aria-label=\"weather icon\" className={classes.avatar} />}\n          title={period.name}\n          subheader={convertDate(period.startTime)}\n        />\n        <CardContent>\n          <span>{period.temperature} °{period.temperatureUnit}</span><div>{period.shortForecast}</div>\n        </CardContent>\n      </CardActionArea>\n      <Divider variant=\"middle\" />\n      <HourlyReport data={hourlyData}/>\n    </Card>\n  );\n}\n\n\n/*\nproperties:\nelevation: {value: 441.96, unitCode: \"unit:m\"}\nforecastGenerator: \"BaselineForecastGenerator\"\ngeneratedAt: \"2020-09-15T22:00:13+00:00\"\nperiods: Array(14)\n0: {number: 1, name: \"This Afternoon\", startTime: \"2020-09-15T17:00:00-05:00\", endTime: \"2020-09-15T18:00:00-05:00\", isDaytime: true, …}\n1: {number: 2, name: \"Tonight\", startTime: \"2020-09-15T18:00:00-05:00\", endTime: \"2020-09-16T06:00:00-05:00\", isDaytime: false, …}\n2: {number: 3, name: \"Wednesday\", startTime: \"2020-09-16T06:00:00-05:00\", endTime: \"2020-09-16T18:00:00-05:00\", isDaytime: true, …}\n3: {number: 4, name: \"Wednesday Night\", startTime: \"2020-09-16T18:00:00-05:00\", endTime: \"2020-09-17T06:00:00-05:00\", isDaytime: false, …}\n4: {number: 5, name: \"Thursday\", startTime: \"2020-09-17T06:00:00-05:00\", endTime: \"2020-09-17T18:00:00-05:00\", isDaytime: true, …}\n5: {number: 6, name: \"Thursday Night\", startTime: \"2020-09-17T18:00:00-05:00\", endTime: \"2020-09-18T06:00:00-05:00\", isDaytime: false, …}\n6: {number: 7, name: \"Friday\", startTime: \"2020-09-18T06:00:00-05:00\", endTime: \"2020-09-18T18:00:00-05:00\", isDaytime: true, …}\n7: {number: 8, name: \"Friday Night\", startTime: \"2020-09-18T18:00:00-05:00\", endTime: \"2020-09-19T06:00:00-05:00\", isDaytime: false, …}\n8: {number: 9, name: \"Saturday\", startTime: \"2020-09-19T06:00:00-05:00\", endTime: \"2020-09-19T18:00:00-05:00\", isDaytime: true, …}\n9: {number: 10, name: \"Saturday Night\", startTime: \"2020-09-19T18:00:00-05:00\", endTime: \"2020-09-20T06:00:00-05:00\", isDaytime: false, …}\n10: {number: 11, name: \"Sunday\", startTime: \"2020-09-20T06:00:00-05:00\", endTime: \"2020-09-20T18:00:00-05:00\", isDaytime: true, …}\n11: {number: 12, name: \"Sunday Night\", startTime: \"2020-09-20T18:00:00-05:00\", endTime: \"2020-09-21T06:00:00-05:00\", isDaytime: false, …}\n12: {number: 13, name: \"Monday\", startTime: \"2020-09-21T06:00:00-05:00\", endTime: \"2020-09-21T18:00:00-05:00\", isDaytime: true, …}\n13: {number: 14, name: \"Monday Night\", startTime: \"2020-09-21T18:00:00-05:00\", endTime: \"2020-09-22T06:00:00-05:00\", isDaytime: false, …}\nlength: 14\n__proto__: Array(0)\nunits: \"us\"\nupdateTime: \"2020-09-15T20:25:36+00:00\"\nupdated: \"2020-09-15T20:25:36+00:00\"\nvalidTimes: \"2020-09-15T14:00:00+00:00/P7DT11H\"\n*/\n\n/*\ndetailedForecast: \"Mostly clear, with a low around 59. South wind 5 to 10 mph.\"\nendTime: \"2020-09-16T06:00:00-05:00\"\nicon: \"https://api.weather.gov/icons/land/night/few?size=medium\"\nisDaytime: false\nname: \"Tonight\"\nnumber: 2\nshortForecast: \"Mostly Clear\"\nstartTime: \"2020-09-15T18:00:00-05:00\"\ntemperature: 59\ntemperatureTrend: null | temperatureTrend: \"falling\" | temperatureTrend: \"rising\"\ntemperatureUnit: \"F\"\nwindDirection: \"S\"\nwindSpeed: \"5 to 10 mph\"\n*/\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\n// import DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nconst useStyles = makeStyles((theme) => ({\n  noWrap: {\n    whiteSpace: 'nowrap'\n  }\n}));\n\nexport default function Alerts(props) { //TODO prop-types\n  const { open, onClose, data } = props;\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const classes = useStyles();\n\n  let alerts = <div>No active alerts</div>;\n\n  if (Array.isArray(data) && data.length > 0) { //TODO prop-types with hooks?\n    alerts = data.map(alert =>\n      <div key={alert.id}>\n        <div>{alert.areaDesc}</div>\n        <div className={classes.noWrap}>{alert.category}</div>\n        <div className={classes.noWrap}>{alert.severity}</div>\n        <div>{alert.event}</div>\n        <div>{alert.headline}</div>\n        <div>Effective: {alert.effective}</div>\n        <div>Expires: {alert.expires}</div>\n      </div>);\n  }\n\n  return (\n    <Dialog fullScreen={fullScreen} open={open} aria-labelledby=\"alert-dialog-title\">\n        <DialogTitle id=\"alert-dialog-title\">Weather Alerts</DialogTitle>\n        <DialogContent>\n            {alerts}\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={onClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\n\n// import CloudIcon from '@material-ui/icons/Cloud';\n// import ScheduleIcon from '@material-ui/icons/Schedule';\nimport NotificationImportantIcon from '@material-ui/icons/NotificationImportant';\nimport './App.css';\n\nimport WeatherCard from './WeatherCard';\nimport Alerts from './Alerts';\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    display: 'none',\n    [theme.breakpoints.down('sm')]: {\n      display: 'block',\n    },\n    marginBottom: theme.spacing(1),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  menuButton: {\n\n  }\n}));\n\n//const versionString = process.env.REACT_APP_GIT_COMMIT_HASH ? `${process.env.REACT_APP_GIT_COMMIT_HASH}`.substr(0, 7) : 'dev';\n\nconst headers = {\n  //Sigh... https://bugs.chromium.org/p/chromium/issues/detail?id=571722\n  //Also User-Agent isn't allowed for CORS\n  //\"User-Agent\": \"(https://github.com/nearwood/skyanchor, nearwood@gmail.com)\" //TODO: Consider externalizing this\n};\n\nconst ApiState = {\n  initial: 'initial',\n  loading: 'loading',\n  error: 'error',\n  loaded: 'loaded'\n};\n\nexport default function App() {\n  const [geolocationState, setGeolocationState] = useState(ApiState.initial);\n  const [locationState, setLocationState] = useState(ApiState.initial);\n  const [forecastState, setForecastState] = useState(ApiState.initial);\n  const [hourlyState, setHourlyState] = useState(ApiState.initial);\n  const [alertsState, setAlertsState] = useState(ApiState.initial);\n\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [cityState, setCityState] = useState(\"Loading...\");\n  const [forecastURL, setForecastURL] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [hourlyURL, setHourlyURL] = useState(null);\n  const [hourlyForecast, setHourlyForecast] = useState(null);\n  const [alertsURL, setAlertsURL] = useState(null);\n  const [alerts, setAlerts] = useState(null);\n\n  const [showAlerts, setShowAlerts] = useState(false);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      //TODO: Maybe a notification of some type.\n      setGeolocationState(ApiState.error);\n    } else {\n      function success(data) {\n        setLatitude(data.coords.latitude);\n        setLongitude(data.coords.longitude);\n        setGeolocationState(ApiState.loaded);\n      }\n\n      function failure(error) {\n        console.error(error);\n        setGeolocationState(ApiState.error);\n      }\n\n      setGeolocationState(ApiState.loading);\n      navigator.geolocation.getCurrentPosition(success, failure);\n    }\n  }, []);\n\n  const parseLocation = (relativeLocation) => {\n    if (relativeLocation?.properties) {\n      const { city, state } = relativeLocation?.properties;\n      return `${city}, ${state}`;\n    }\n\n    return '';\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(`https://api.weather.gov/points/${latitude},${longitude}`, { headers }).then(results => results.json());\n        setCityState(parseLocation(response?.properties?.relativeLocation));\n        setForecastURL(response?.properties?.forecast);\n        setHourlyURL(response?.properties?.forecastHourly);\n        //State\n        //setAlertsURL(`https://api.weather.gov/alerts/active?status=actual&message_type=alert,update,cancel&area=CA`);\n        //API allows county value for zone, but location response only has that as part of a URL\n        const latLonPoint = `${latitude},${longitude}`;\n        setAlertsURL(`https://api.weather.gov/alerts/active?status=actual&message_type=alert,update,cancel&point=${encodeURIComponent(latLonPoint)}`);\n        setLocationState(ApiState.loaded);\n      } catch (err) {\n        console.error(err);\n        setLocationState(ApiState.error);\n      }\n    }\n\n    if (typeof latitude === 'number' && typeof longitude === 'number') {\n      setLocationState(ApiState.loading);\n      fetchData();\n    }\n  }, [latitude, longitude]);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(forecastURL, { headers }).then(results => results.json());\n        setForecast(response?.properties?.periods);\n        setForecastState(ApiState.loaded);\n      } catch (err) {\n        console.error(err);\n        setForecastState(ApiState.error);\n      }\n    }\n\n    if (forecastURL) {\n      setForecastState(ApiState.loading);\n      fetchData();\n    }\n  }, [forecastURL]);\n\n  const getHourlySubset = (hourlyData, period) => {\n    if (!Array.isArray(hourlyData) || !period) {\n      return [];\n    }\n\n    const start = new Date(period.startTime);\n    const end = new Date(period.endTime);\n    return hourlyData.filter(hour => {\n      const hourStart = new Date(hour.startTime);\n      const hourEnd = new Date(hour.endTime);\n      return (hourStart >= start && hourEnd <= end);\n    });\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(hourlyURL).then(results => results.json());\n        setHourlyForecast(response?.properties?.periods);\n        setHourlyState(ApiState.loaded);\n      } catch (err) {\n        console.error(err);\n        setHourlyState(ApiState.error);\n      }\n    }\n\n    if (hourlyURL) {\n      setHourlyState(ApiState.loading);\n      fetchData();\n    }\n  }, [hourlyURL]);\n\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(alertsURL).then(results => results.json());\n        setAlerts(response?.features);\n        setAlertsState(ApiState.loaded);\n      } catch (err) {\n        console.error(err);\n        setAlertsState(ApiState.error);\n      }\n    }\n\n    if (alertsURL) {\n      setAlertsState(ApiState.loading);\n      fetchData();\n    }\n  }, [alertsURL]);\n\n  const loadingProgress = () => {\n    const map = [geolocationState, locationState, forecastState, hourlyState, alertsState];\n    const increment = Math.round(100 / map.length);\n    const value = map.reduce((total, value) => total + (value === ApiState.loaded ? increment : 0), 0);\n    return value;\n  };\n\n  const alertCount = Array.isArray(alerts) ? alerts.length : 0;\n\n  return (\n    <div className=\"App\" style={{ padding: 10 }}>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap className={classes.title}>\n            <span role=\"img\" aria-label=\"Skyanchor logo\">🌩️</span>\n            {cityState}\n          </Typography>\n          <IconButton edge=\"end\" className={classes.menuButton} disabled={alertCount === 0}\n            color=\"inherit\" aria-label=\"alerts\" onClick={() => setShowAlerts(true)}>\n            {alertCount > 0 ?\n              <Badge badgeContent={alertCount} color=\"error\">\n              <NotificationImportantIcon />\n              </Badge>\n              : \n              <NotificationImportantIcon />\n            }\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      {forecastState !== ApiState.loaded && <LinearProgress variant=\"determinate\" value={loadingProgress()} />}\n      <Grid container spacing={2}>\n        {process.env.NODE_ENV !== 'production' && <Grid item xs={12} md={6} lg={2}>\n          <div>Geo: {geolocationState}</div>\n          <div>Grid: {locationState}</div>\n          <div>Forecast: {forecastState}</div>\n          <div>Hourly: {hourlyState}</div>\n          <div>Alerts: {alertsState}</div>\n        </Grid>}\n        {Array.isArray(forecast) && forecast.map(period =>\n          <Grid item xs={12} md={6} lg={2} key={`${period.number}_${period.name}`}>\n            <WeatherCard period={period} hourlyData={getHourlySubset(hourlyForecast, period)} />\n          </Grid>)}\n      </Grid>\n      <Alerts data={alerts} open={showAlerts} onClose={() => setShowAlerts(false)} />\n      {/* <span>{versionString}</span><span>Created by <a href=\"https://twitter.com/nearwood\">@nearwood</a>.</span><span><a href=\"https://github.com/nearwood/skyanchor\"><img alt=\"Github logo\" height=\"32\" width=\"32\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@v3/icons/github.svg\" /></a></span> */}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}