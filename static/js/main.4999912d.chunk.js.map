{"version":3,"sources":["HourlyReport.jsx","WeatherCard.jsx","WeatherAlerts.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","noWrap","whiteSpace","extraData","breakpoints","down","display","HourlyReport","props","data","classes","Array","isArray","Table","size","aria-label","TableHead","TableRow","TableCell","align","className","TableBody","map","hour","component","scope","dateString","startTime","Date","getHours","shortForecast","temperature","temperatureUnit","windSpeed","windDirection","forecast","fontSize","nowrap","avatar","width","spacing","height","divider","margin","card","WeatherCard","period","hourlyData","useState","showHourly","setShowHourly","Card","CardActionArea","onClick","length","CardHeader","Avatar","src","icon","variant","title","name","subheader","utcString","dateObj","toLocaleDateString","convertDate","CardContent","Typography","color","detailedForecast","Divider","WeatherCardSkeleton","Skeleton","animation","style","marginBottom","alertHeader","backgroundColor","palette","warning","light","alertHeaderIcon","position","top","WeatherAlerts","open","onClose","useTheme","fullScreen","useMediaQuery","alerts","alert","WeatherAlert","properties","id","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogActions","Button","autoFocus","Severity","level","severity","event","colSpan","headline","areaDesc","effective","expires","drawerContainer","appBar","drawer","flexBasis","flexGrow","up","drawerPaper","flexShrink","list","paddingTop","listHeader","primary","dark","toolbar","progress","App","ApiState","initial","geolocationState","setGeolocationState","locationState","setLocationState","forecastState","setForecastState","hourlyState","setHourlyState","alertsState","setAlertsState","appStatusMap","errors","setErrors","warnings","setWarnings","latitude","setLatitude","longitude","setLongitude","cityState","setCityState","forecastURL","setForecastURL","setForecast","hourlyURL","setHourlyURL","hourlyForecast","setHourlyForecast","alertsURL","setAlertsURL","setAlerts","showAlerts","setShowAlerts","useEffect","navigator","geolocation","loading","getCurrentPosition","coords","loaded","error","console","a","fetch","process","then","results","json","response","parseLocation","relativeLocation","forecastHourly","latLonPoint","encodeURIComponent","fetchData","periods","features","loadingComplete","every","state","alertCount","showLoadingIndicator","AppBar","Toolbar","role","CircularProgress","IconButton","edge","menuButton","disabled","Badge","badgeContent","Drawer","anchor","paper","List","ListItem","ListItemIcon","ListItemText","button","Grid","container","direction","item","xs","i","Alert","getHourlySubset","number","city","start","end","endTime","filter","hourStart","hourEnd","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4999912d.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  noWrap: {\n    whiteSpace: 'nowrap'\n  },\n  extraData: {\n    [theme.breakpoints.down('xs')]: {\n      display: 'none'\n    }\n  }\n}));\n\nconst getHour = (dateString) => new Date(dateString).getHours();\n\n/** A table of weather data for each hour: Wind, temperature, etc. */\nexport default function HourlyReport(props) {\n  const { data } = props;\n\n  const classes = useStyles();\n\n  if (!Array.isArray(data)) {\n    return null;\n  }\n\n  return (\n    <Table size=\"small\" aria-label=\"hourly weather table\">\n      <TableHead>\n        <TableRow>\n          <TableCell>Time</TableCell>\n          <TableCell align=\"right\">Forecast</TableCell>\n          <TableCell align=\"right\">Temperature</TableCell>\n          <TableCell align=\"right\" className={classes.extraData}>Wind</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {data.map((hour) => (\n          <TableRow key={hour.startTime}>\n            <TableCell component=\"th\" scope=\"row\">{getHour(hour.startTime)}:00</TableCell>\n            <TableCell align=\"right\">{hour.shortForecast}</TableCell>\n            <TableCell align=\"right\" className={classes.noWrap}>{`${hour.temperature} °${hour.temperatureUnit}`}</TableCell>\n            <TableCell align=\"right\" className={`${classes.noWrap} ${classes.extraData}`}>{`${hour.windSpeed} ${hour.windDirection}`}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport HourlyReport from './HourlyReport';\n\nconst useStyles = makeStyles((theme) => ({\n  forecast: {\n    fontSize: '1.2em'\n  },\n  nowrap: {\n    whiteSpace: 'nowrap'\n  },\n  avatar: {\n    width: theme.spacing(8),\n    height: theme.spacing(8),\n  },\n  divider: {\n    margin: '4px 0'\n  },\n  card: {\n    margin: theme.spacing(1)\n  }\n}));\n\n/** A card that displays short weather forecast information, but expands to show an hourly breakdown. */\nexport default function WeatherCard(props) {\n  const { period, hourlyData } = props;\n\n  const [showHourly, setShowHourly] = useState(false);\n\n  const classes = useStyles();\n\n  if (!Array.isArray(hourlyData) || typeof period !== 'object') {\n    return null;\n  }\n\n  const convertDate = (utcString) => {\n    const dateObj = new Date(utcString);\n    return dateObj?.toLocaleDateString();\n  };\n\n  return (\n    <Card className={classes.card}>\n      <CardActionArea onClick={() => hourlyData.length > 0 ? setShowHourly(!showHourly) : void 0}>\n        <CardHeader\n          avatar={<Avatar src={period.icon} variant=\"square\" aria-label=\"weather icon\" className={classes.avatar} />}\n          title={<span className={classes.forecast}><span className={classes.nowrap}>{period.name}</span> - <span className={classes.nowrap}>{`${period.temperature} °${period.temperatureUnit}`}</span> - <span aria-label=\"brief forecast\">{period.shortForecast}</span></span>}\n          subheader={convertDate(period.startTime)}\n        />\n      </CardActionArea>\n      {showHourly &&\n        <CardContent>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\"> {period.detailedForecast} </Typography>\n          <Divider variant=\"middle\" className={classes.divider} />\n          <HourlyReport data={hourlyData} />\n        </CardContent>\n      }\n    </Card>\n  );\n}\n\n/** A MUI Skeleton of a WeatherCard to reduce appearance of load-time */\nexport function WeatherCardSkeleton() {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        avatar={<Skeleton animation=\"wave\" variant=\"rect\" className={classes.avatar} />}\n        title={<Skeleton animation=\"wave\" height={24} width=\"66%\" style={{ marginBottom: 6 }} />}\n        subheader={<Skeleton animation=\"wave\" height={10} width=\"25%\" />}\n      />\n    </Card>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\n\n\nconst useStyles = makeStyles((theme) => ({\n  alertHeader: {\n    backgroundColor: theme.palette.warning.light\n    //color: \n  },\n  alertHeaderIcon: {\n    position: 'relative',\n    top: 4\n  },\n  divider: {\n    width: '100%',\n    height: theme.spacing(1)\n  },\n  noWrap: {\n    whiteSpace: 'nowrap'\n  }\n}));\n\n/** A modal that displays weather alerts and advisories\n * Note: Currently React complains about MUI's Modal using `findDOMNode`. See: https://github.com/mui-org/material-ui/issues/13394.\n */\nexport default function WeatherAlerts(props) {\n  const { open, onClose, data } = props;\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  let alerts = <div>No active alerts</div>;\n\n  if (Array.isArray(data) && data.length > 0) {\n    alerts = data.map(alert => <WeatherAlert key={alert.id} alert={alert.properties} />);\n  }\n\n  return (\n    <Dialog fullScreen={fullScreen} open={open} aria-labelledby=\"alert-dialog-title\">\n      <DialogTitle id=\"alert-dialog-title\">Weather Alerts</DialogTitle>\n      <DialogContent>\n        {alerts}\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={onClose} color=\"primary\">Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\n/** A single alert, with a headline, severity, etc. */\nexport function WeatherAlert({ alert }) {\n  const classes = useStyles();\n\n  return (<>\n    <Table size=\"small\" aria-label=\"weather alerts/advisories\">\n      <TableHead className={classes.alertHeader}>\n        <TableRow>\n          <TableCell align=\"left\"><Severity level={alert.severity}/></TableCell>\n          <TableCell align=\"right\">{alert.event}</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        <TableRow>\n          <TableCell component=\"th\" colSpan={2}>{alert.headline}</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell align=\"center\" colSpan={2}>{alert.areaDesc}</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell align=\"left\">Effective:</TableCell>\n          <TableCell align=\"right\">{alert.effective}</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell align=\"left\">Expires:</TableCell>\n          <TableCell align=\"right\">{alert.expires}</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n    <div className={classes.divider}/>\n  </>);\n}\n\n/** Shows a severity level with an icon if known.\n * Severity levels: extreme, severe, moderate, minor, unknown.\n */\nfunction Severity({level}) {\n  const classes = useStyles();\n\n  switch (level) {\n    default:\n    case \"Unknown\":\n      return null;\n    case \"Minor\":\n      return <><WarningRoundedIcon className={classes.alertHeaderIcon}/><span>Minor</span></>;\n    case \"Moderate\":\n      return <><WarningRoundedIcon className={classes.alertHeaderIcon} color='primary'/><span>Moderate</span></>;\n    case \"Severe\":\n      return <><WarningRoundedIcon className={classes.alertHeaderIcon} color='secondary'/><span>Severe</span></>;\n    case \"Extreme\":\n      return <><WarningRoundedIcon className={classes.alertHeaderIcon} color='error'/><span>Extreme</span></>;\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\nimport NotificationImportantIcon from '@material-ui/icons/NotificationImportant';\nimport './App.css';\n\nimport WeatherCard, { WeatherCardSkeleton } from './WeatherCard';\nimport WeatherAlerts from './WeatherAlerts';\n\n//import alertData from './exampleData/alerts';\n\nconst drawerWidth = 208;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n  },\n  drawerContainer: {\n    display: 'flex',\n  },\n  appBar: {\n    display: 'none',\n    [theme.breakpoints.down('sm')]: {\n      display: 'block'\n    },\n    marginBottom: theme.spacing(1)\n  },\n  drawer: {\n    flexBasis: drawerWidth,\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('md')]: {\n      display: 'inline-block'\n    }\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  forecast: {\n    [theme.breakpoints.up('md')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      flexShrink: 1\n    }\n  },\n  list: {\n    paddingTop: 0\n  },\n  listHeader: {\n    backgroundColor: theme.palette.primary.dark,\n    color: 'white'\n  },\n  toolbar: {\n    position: 'relative'\n  },\n  title: {\n    flexGrow: 1\n  },\n  progress: {\n    color: 'gold'\n  }\n}));\n\n//const versionString = process.env.REACT_APP_GIT_COMMIT_HASH ? `${process.env.REACT_APP_GIT_COMMIT_HASH}`.substr(0, 7) : 'dev';\n\nexport default function App() {\n  //Track indvidual API call statuses with finite states.\n  const [geolocationState, setGeolocationState] = useState(ApiState.initial);\n  const [locationState, setLocationState] = useState(ApiState.initial);\n  const [forecastState, setForecastState] = useState(ApiState.initial);\n  const [hourlyState, setHourlyState] = useState(ApiState.initial);\n  const [alertsState, setAlertsState] = useState(ApiState.initial);\n  const appStatusMap = [geolocationState, locationState, forecastState, hourlyState, alertsState];\n\n  //Any issues with getting data will be stored here as simple string arrays.\n  const [errors, setErrors] = useState([]);\n  const [warnings, setWarnings] = useState([]);\n\n  //Data results from various API calls\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [cityState, setCityState] = useState(\"\");\n  const [forecastURL, setForecastURL] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [hourlyURL, setHourlyURL] = useState(null);\n  const [hourlyForecast, setHourlyForecast] = useState(null);\n  const [alertsURL, setAlertsURL] = useState(null);\n  const [alerts, setAlerts] = useState(null);\n\n  //For the Alert modal dialog.\n  const [showAlerts, setShowAlerts] = useState(false);\n\n  const classes = useStyles();\n\n  useEffect(\n    /** Obtains the devices location, if possible. */\n    function getLocation() {\n      if (!navigator.geolocation) {\n        setErrors(errors => [...errors, \"Geolocation not supported in this browser.\"]);\n        setGeolocationState(ApiState.error);\n      } else {\n        function success(data) {\n          setLatitude(data.coords.latitude);\n          setLongitude(data.coords.longitude);\n          setGeolocationState(ApiState.loaded);\n        }\n\n        function failure(error) {\n          console.error(error);\n          setErrors(errors => [...errors, \"Could not obtain device position.\"]);\n          setForecast([]);\n          setGeolocationState(ApiState.error);\n        }\n\n        setGeolocationState(ApiState.loading);\n        navigator.geolocation.getCurrentPosition(success, failure);\n      }\n    }, []);\n\n  useEffect(\n    /** If the device location (lat/lon) is known, get the NOAA grid point it corresponds to for subsequent API calls.\n     * Sets API endpoints for all other API calls (forecast, hourly forecast, alerts), and misc. location data.\n    */\n    function getLocationGridPoint() {\n      async function fetchData() {\n        try {\n          const response = await fetch(`${process.env.REACT_APP_API_BASEURL}/points/${latitude},${longitude}`).then(results => results.json());\n          setCityState(parseLocation(response?.properties?.relativeLocation));\n          setForecastURL(response?.properties?.forecast);\n          setHourlyURL(response?.properties?.forecastHourly);\n          //State\n          //setAlertsURL(`${process.env.REACT_APP_API_BASEURL}/alerts/active?status=actual&message_type=alert,update,cancel&area=CA`);\n          //API allows county value for zone, but location response only has that as part of a URL\n          const latLonPoint = `${latitude},${longitude}`;\n          setAlertsURL(`${process.env.REACT_APP_API_BASEURL}/alerts/active?status=actual&message_type=alert,update,cancel&point=${encodeURIComponent(latLonPoint)}`);\n          setLocationState(ApiState.loaded);\n        } catch (err) {\n          setErrors(errors => [...errors, \"Could not obtain NOAA grid point.\"]);\n          console.error(err);\n          setForecast([]);\n          setLocationState(ApiState.error);\n        }\n      }\n\n      if (typeof latitude === 'number' && typeof longitude === 'number') {\n        setLocationState(ApiState.loading);\n        fetchData();\n      }\n    }, [latitude, longitude]);\n\n  useEffect(\n    /** Obtains weather forecast data for the current location. */\n    function getForecast() {\n      async function fetchData() {\n        try {\n          const response = await fetch(forecastURL).then(results => results.json());\n          setForecast(response?.properties?.periods);\n          setForecastState(ApiState.loaded);\n        } catch (err) {\n          setErrors(errors => [...errors, \"Could not obtain NOAA forecast.\"]);\n          console.error(err);\n          setForecast([]);\n          setForecastState(ApiState.error);\n        }\n      }\n\n      if (forecastURL) {\n        setForecastState(ApiState.loading);\n        fetchData();\n      }\n    }, [forecastURL]);\n\n\n  useEffect(\n    /** Obtains hourly forecast data for the current location. */\n    function getHourlyForecast() {\n      async function fetchData() {\n        try {\n          const response = await fetch(hourlyURL).then(results => results.json());\n          setHourlyForecast(response?.properties?.periods);\n          setHourlyState(ApiState.loaded);\n        } catch (err) {\n          setWarnings(warnings => [...warnings, \"Could not obtain NOAA hourly forecast.\"]);\n          console.error(err);\n          setHourlyState(ApiState.error);\n        }\n      }\n\n      if (hourlyURL) {\n        setHourlyState(ApiState.loading);\n        fetchData();\n      }\n    }, [hourlyURL]);\n\n\n  useEffect(\n    /** Obtains weather alert/advisory data for the current location. */\n    function getWeatherAlerts() {\n      async function fetchData() {\n        try {\n          const response = await fetch(alertsURL).then(results => results.json());\n          setAlerts(response?.features);\n          setAlertsState(ApiState.loaded);\n        } catch (err) {\n          setWarnings(warnings => [...warnings, \"Could not obtain NOAA weather alerts.\"]);\n          console.error(err);\n          setAlertsState(ApiState.error);\n        }\n      }\n\n      if (alertsURL) {\n        setAlertsState(ApiState.loading);\n        fetchData();\n      }\n    }, [alertsURL]);\n\n  /** Simple way to determine whether loading is \"complete\". A more thorough method would have to account\n   * for the API call dependencies. */\n  const loadingComplete = appStatusMap.every(state => state === ApiState.loaded);\n\n  const alertCount = Array.isArray(alerts) ? alerts.length : 0;\n\n  const showLoadingIndicator = errors.length === 0 && warnings.length === 0 && !loadingComplete;\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar className={classes.toolbar}>\n          <Typography variant=\"h6\" noWrap className={classes.title}>\n            <span role=\"img\" aria-label=\"Skyanchor mobile logo\">🌩️</span>\n            <span aria-label=\"location\">{cityState}</span>\n          </Typography>\n          {showLoadingIndicator && <CircularProgress className={classes.progress} />}\n          <IconButton edge=\"end\" className={classes.menuButton} disabled={alertCount === 0}\n            color=\"inherit\" aria-label=\"alerts\" onClick={() => setShowAlerts(true)}>\n            {alertCount > 0 ?\n              <Badge badgeContent={alertCount} color=\"error\">\n                <NotificationImportantIcon />\n              </Badge>\n              :\n              <NotificationImportantIcon />\n            }\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <div className={classes.drawerContainer}>\n        <Drawer variant=\"permanent\" anchor=\"left\"\n          className={classes.drawer}\n          classes={{ paper: classes.drawerPaper }}>\n          <List component=\"nav\" aria-label=\"weather location and options\" className={classes.list}>\n            <ListItem className={classes.listHeader}>\n              <ListItemIcon><span role=\"img\" aria-label=\"Skyanchor desktop logo\">🌩️</span>{showLoadingIndicator && <CircularProgress size={20} className={classes.progress} />}</ListItemIcon>\n              <ListItemText primary={<span aria-label=\"location\">{cityState}</span>} />\n            </ListItem>\n            <ListItem button disabled={alertCount === 0} onClick={() => setShowAlerts(true)}>\n              <ListItemIcon>\n                {alertCount > 0 ?\n                  <Badge badgeContent={alertCount} color=\"error\">\n                    <NotificationImportantIcon />\n                  </Badge>\n                  :\n                  <NotificationImportantIcon />\n                }\n              </ListItemIcon>\n              <ListItemText primary={\"Alerts\"} />\n            </ListItem>\n          </List>\n        </Drawer>\n        <Grid container direction=\"column\" className={classes.forecast}>\n          {errors.length > 0 && <Grid item xs={12}>\n            {errors.map((error, i) => <Alert key={i} variant=\"filled\" severity=\"error\">{error}</Alert>)}\n          </Grid>}\n          {warnings.length > 0 && <Grid item xs={12}>\n            {warnings.map((warning, i) => <Alert key={i} variant=\"filled\" severity=\"warning\">{warning}</Alert>)}\n          </Grid>}\n          {Array.isArray(forecast) ? forecast.map(period =>\n            <Grid item xs={12} key={`${period.number}_${period.name}`}>\n              <WeatherCard period={period} hourlyData={getHourlySubset(hourlyForecast, period)} />\n            </Grid>)\n            :\n            <>\n              <Grid item xs={12}>\n                <WeatherCardSkeleton />\n              </Grid>\n              <Grid item xs={12}>\n                <WeatherCardSkeleton />\n              </Grid>\n              <Grid item xs={12}>\n                <WeatherCardSkeleton />\n              </Grid>\n              <Grid item xs={12}>\n                <WeatherCardSkeleton />\n              </Grid>\n              <Grid item xs={12}>\n                <WeatherCardSkeleton />\n              </Grid>\n              <Grid item xs={12}>\n                <WeatherCardSkeleton />\n              </Grid>\n            </>\n          }\n        </Grid>\n      </div>\n      <WeatherAlerts data={alerts} open={showAlerts} onClose={() => setShowAlerts(false)} />\n      {/* <span>{versionString}</span><span>Created by <a href=\"https://twitter.com/nearwood\">@nearwood</a>.</span><span><a href=\"https://github.com/nearwood/skyanchor\"><img alt=\"Github logo\" height=\"32\" width=\"32\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@v3/icons/github.svg\" /></a></span> */}\n    </div>\n  );\n}\n\n/** Enum to track the state of an API call */\nconst ApiState = {\n  initial: 'initial',\n  loading: 'loading',\n  error: 'error',\n  loaded: 'loaded'\n};\n\n/** Given a api.weather.gov `relativeLocation` from the `/points` call, piece a \"city, state\" string together.\n * @returns {string} A string of the format: `City, ST` or an empty string `''` if the argument cannot be parsed.\n*/\nexport function parseLocation(relativeLocation) {\n  if (relativeLocation?.properties) {\n    const { city, state } = relativeLocation?.properties;\n    if (typeof city === 'string' && typeof state === 'string') {\n      return `${city}, ${state}`;\n    }\n  }\n\n  return '';\n};\n\n/** Hourly data comes as a large array for the entire forecast (7 days). This filters the hourly forecast\n * data to just what occurs between a general forecast period's `startTime` and `endTime`.\n * @returns {Array} A new array containing any items from `hourlyData` that have `startTime` and `endTime` between the\n *                  period's `startTime` and `endTime`, or an empty array if the arguments cannot be parsed.\n*/\nexport function getHourlySubset(hourlyData, period) {\n  if (!Array.isArray(hourlyData) || !period) {\n    return [];\n  }\n\n  const start = new Date(period.startTime);\n  const end = new Date(period.endTime);\n  return hourlyData.filter(hour => {\n    const hourStart = new Date(hour.startTime);\n    const hourEnd = new Date(hour.endTime);\n    return (hourStart >= start && hourEnd <= end);\n  });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}